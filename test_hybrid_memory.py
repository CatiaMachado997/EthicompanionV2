"""
Teste Completo do Sistema de Mem√≥ria H√≠brida
Demonstra como usar o MemoryManager com PostgreSQL + Weaviate
"""

import asyncio
import logging
import sys
import os
from datetime import datetime

# Adicionar o diret√≥rio backend ao path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from backend_app.core.hybrid_memory_manager import MemoryManager
from backend_app.core.weaviate_client import get_weaviate_client, test_weaviate_connection
from backend_app.core.ai_agent import get_ai_agent
from backend_app.models.database import get_db_session, create_tables

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_hybrid_memory_system():
    """Teste completo do sistema de mem√≥ria h√≠brida"""
    
    print("üß† === TESTE DO SISTEMA DE MEM√ìRIA H√çBRIDA ===")
    print()
    
    # 1. TESTAR LIGA√á√ïES
    print("1Ô∏è‚É£ **Testando Liga√ß√µes...**")
    
    # Testar Weaviate
    try:
        weaviate_status = test_weaviate_connection()
        if weaviate_status["status"] == "connected":
            print("‚úÖ Weaviate: Conectado")
            weaviate_client = get_weaviate_client()
        else:
            print(f"‚ùå Weaviate: {weaviate_status['error']}")
            return
    except Exception as e:
        print(f"‚ùå Erro Weaviate: {e}")
        return
    
    # Testar PostgreSQL
    try:
        create_tables()  # Criar tabelas se n√£o existirem
        db_session = get_db_session()
        print("‚úÖ PostgreSQL: Conectado")
    except Exception as e:
        print(f"‚ùå Erro PostgreSQL: {e}")
        return
    
    # Testar Agente AI
    try:
        ai_agent = get_ai_agent()
        agent_status = ai_agent.get_agent_status()
        print(f"‚úÖ Agente AI: {agent_status['status']} ({agent_status['llm_type']})")
    except Exception as e:
        print(f"‚ùå Erro Agente AI: {e}")
        ai_agent = None
    
    print()
    
    # 2. INICIALIZAR MEMORY MANAGER
    print("2Ô∏è‚É£ **Inicializando MemoryManager...**")
    try:
        memory_manager = MemoryManager(
            db_session=db_session,
            weaviate_client=weaviate_client
        )
        print("‚úÖ MemoryManager inicializado")
    except Exception as e:
        print(f"‚ùå Erro ao inicializar MemoryManager: {e}")
        return
    
    print()
    
    # 3. TESTAR CICLO COMPLETO DE CONVERSA
    print("3Ô∏è‚É£ **Testando Ciclo Completo de Conversa...**")
    
    session_id = f"test_session_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    print(f"Sess√£o de teste: {session_id}")
    print()
    
    # Conversas de teste
    test_conversations = [
        {
            "user": "Ol√°! Estou a enfrentar um dilema √©tico no trabalho. Como devo abordar uma situa√ß√£o onde vejo um colega a fazer algo incorreto?",
            "expected_context": "primeira_conversa"
        },
        {
            "user": "O que significa exatamente 'fazer a coisa certa' numa situa√ß√£o como esta?",
            "expected_context": "segunda_conversa"  
        },
        {
            "user": "Podes dar-me alguns passos pr√°ticos para lidar com isto?",
            "expected_context": "terceira_conversa"
        }
    ]
    
    for i, conv in enumerate(test_conversations, 1):
        print(f"**Conversa {i}:**")
        user_message = conv["user"]
        print(f"üôã **Utilizador:** {user_message}")
        
        # 3a. Recuperar contexto
        try:
            context = await memory_manager.get_context(
                session_id=session_id,
                query=user_message
            )
            print(f"üß† **Contexto recuperado:** {len(context)} caracteres")
        except Exception as e:
            print(f"‚ùå Erro ao recuperar contexto: {e}")
            context = ""
        
        # 3b. Processar com agente AI (se dispon√≠vel)
        if ai_agent:
            try:
                # Construir prompt com contexto
                enhanced_prompt = f"""CONTEXTO DE MEM√ìRIA:
{context}

---

MENSAGEM ATUAL:
{user_message}"""

                ai_response = await ai_agent.process_message(
                    message=enhanced_prompt,
                    session_id=session_id
                )
                assistant_message = ai_response["response"]
                print(f"ü§ñ **Assistente:** {assistant_message[:200]}{'...' if len(assistant_message) > 200 else ''}")
                
            except Exception as e:
                print(f"‚ùå Erro no agente AI: {e}")
                assistant_message = f"Obrigado pela tua pergunta sobre √©tica. Esta √© uma √°rea complexa que requer reflex√£o cuidadosa sobre valores e consequ√™ncias."
        else:
            assistant_message = f"Resposta simulada para: {user_message[:50]}..."
            print(f"ü§ñ **Assistente (simulado):** {assistant_message}")
        
        # 3c. Guardar na mem√≥ria
        try:
            success = memory_manager.add_message(
                session_id=session_id,
                user_message=user_message,
                assistant_message=assistant_message
            )
            
            if success:
                print("‚úÖ Conversa guardada na mem√≥ria")
            else:
                print("‚ùå Falha ao guardar conversa")
                
        except Exception as e:
            print(f"‚ùå Erro ao guardar: {e}")
        
        print()
        
        # Pequena pausa entre conversas
        await asyncio.sleep(1)
    
    # 4. TESTAR RECUPERA√á√ÉO DE MEM√ìRIA
    print("4Ô∏è‚É£ **Testando Recupera√ß√£o de Mem√≥ria...**")
    
    test_queries = [
        "dilema √©tico trabalho",
        "fazer a coisa certa",
        "passos pr√°ticos"
    ]
    
    for query in test_queries:
        print(f"**Query:** '{query}'")
        try:
            context = await memory_manager.get_context(
                session_id=session_id,
                query=query,
                recent_limit=3,
                semantic_limit=2
            )
            
            print(f"üìÑ **Contexto ({len(context)} chars):**")
            print(context[:500] + ("..." if len(context) > 500 else ""))
            print()
            
        except Exception as e:
            print(f"‚ùå Erro na query '{query}': {e}")
            print()
    
    # 5. ESTAT√çSTICAS DO SISTEMA
    print("5Ô∏è‚É£ **Estat√≠sticas do Sistema...**")
    try:
        stats = memory_manager.get_memory_stats()
        print("üìä **Estat√≠sticas da Mem√≥ria:**")
        print(f"PostgreSQL - Mensagens: {stats['postgresql']['total_messages']}")
        print(f"PostgreSQL - Sess√µes: {stats['postgresql']['unique_sessions']}")
        print(f"Weaviate - Vetores: {stats['weaviate']['total_vectors']}")
        print(f"Status: {stats['status']}")
    except Exception as e:
        print(f"‚ùå Erro ao obter estat√≠sticas: {e}")
    
    print()
    
    # 6. LIMPEZA
    print("6Ô∏è‚É£ **Limpeza...**")
    try:
        memory_manager.close()
        db_session.close()
        print("‚úÖ Recursos fechados")
    except Exception as e:
        print(f"‚ùå Erro na limpeza: {e}")
    
    print()
    print("üéâ **TESTE COMPLETO!**")
    print()
    print("**Pr√≥ximos Passos:**")
    print("1. Integrar com frontend Next.js")
    print("2. Configurar vari√°veis de ambiente")
    print("3. Testar com dados reais")
    print("4. Otimizar performance")

async def test_simple_memory_operations():
    """Teste mais simples apenas das opera√ß√µes b√°sicas"""
    print("üîç === TESTE SIMPLES DAS OPERA√á√ïES B√ÅSICAS ===")
    print()
    
    try:
        # Setup b√°sico
        create_tables()
        db_session = get_db_session()
        
        # Teste sem Weaviate se n√£o estiver dispon√≠vel
        try:
            weaviate_client = get_weaviate_client()
            print("‚úÖ Weaviate dispon√≠vel")
        except:
            print("‚ö†Ô∏è Weaviate n√£o dispon√≠vel - teste limitado")
            return
        
        memory_manager = MemoryManager(db_session, weaviate_client)
        
        # Teste b√°sico
        session_id = "simple_test"
        
        print("üíæ Guardando mensagem de teste...")
        success = memory_manager.add_message(
            session_id=session_id,
            user_message="Teste de mem√≥ria",
            assistant_message="Resposta de teste"
        )
        
        if success:
            print("‚úÖ Mensagem guardada")
            
            print("üîç Recuperando contexto...")
            context = await memory_manager.get_context(
                session_id=session_id,
                query="teste"
            )
            
            print(f"üìÑ Contexto: {len(context)} caracteres")
            print("‚úÖ Teste b√°sico completo")
        else:
            print("‚ùå Falha ao guardar mensagem")
        
        memory_manager.close()
        
    except Exception as e:
        print(f"‚ùå Erro no teste simples: {e}")

if __name__ == "__main__":
    print("Escolhe o tipo de teste:")
    print("1. Teste completo do sistema")
    print("2. Teste simples das opera√ß√µes b√°sicas")
    
    choice = input("Op√ß√£o (1 ou 2): ").strip()
    
    if choice == "1":
        asyncio.run(test_hybrid_memory_system())
    elif choice == "2":
        asyncio.run(test_simple_memory_operations())
    else:
        print("Op√ß√£o inv√°lida. A executar teste simples...")
        asyncio.run(test_simple_memory_operations())
