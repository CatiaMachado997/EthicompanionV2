#!/bin/bash

# üöÄ Script de Instala√ß√£o Autom√°tica - Ethic Companion V2
# Configura todo o sistema de mem√≥ria h√≠brida

echo "üß† === INSTALA√á√ÉO DO SISTEMA DE MEM√ìRIA H√çBRIDA ==="
echo ""

# Verificar se estamos no diret√≥rio correto
if [ ! -f "package.json" ] || [ ! -f "test_hybrid_memory.py" ]; then
    echo "‚ùå Erro: Execute este script na raiz do projeto Ethic Companion V2"
    exit 1
fi

echo "1Ô∏è‚É£ **Instalando Depend√™ncias Python...**"

# Instalar depend√™ncias b√°sicas do Python
pip install -q sqlalchemy psycopg2-binary weaviate-client python-dotenv

# Instalar LangChain
echo "   Instalando LangChain..."
pip install -q langchain langchain-openai langchain-google-genai

# Instalar outras depend√™ncias
pip install -q tavily-python requests asyncio

echo "‚úÖ Depend√™ncias Python instaladas"
echo ""

echo "2Ô∏è‚É£ **Configurando Ambiente...**"

# Criar arquivo .env se n√£o existir
if [ ! -f ".env" ]; then
    echo "   Criando arquivo .env..."
    cp .env.hybrid.example .env
    echo "‚úÖ Arquivo .env criado (configure suas API keys)"
else
    echo "‚úÖ Arquivo .env j√° existe"
fi

echo ""

echo "3Ô∏è‚É£ **Configurando Base de Dados...**"

# Criar base de dados SQLite para desenvolvimento
python3 -c "
from backend_app.models.database import create_tables
try:
    create_tables()
    print('‚úÖ Base de dados SQLite criada')
except Exception as e:
    print(f'‚ö†Ô∏è Erro ao criar BD: {e}')
"

echo ""

echo "4Ô∏è‚É£ **Verificando Weaviate...**"

# Verificar se Weaviate est√° a correr
if curl -s http://localhost:8080/v1/meta > /dev/null 2>&1; then
    echo "‚úÖ Weaviate est√° a correr em http://localhost:8080"
else
    echo "‚ö†Ô∏è Weaviate n√£o est√° a correr. Para iniciar:"
    echo "   docker run -p 8080:8080 semitechnologies/weaviate:latest"
    echo "   ou"
    echo "   docker-compose -f docker/docker-compose.yml up -d"
fi

echo ""

echo "5Ô∏è‚É£ **Instalando Depend√™ncias Frontend...**"

# Instalar depend√™ncias do npm se necess√°rio
if [ ! -d "node_modules" ]; then
    echo "   Instalando pacotes npm..."
    npm install
    echo "‚úÖ Depend√™ncias frontend instaladas"
else
    echo "‚úÖ Depend√™ncias frontend j√° instaladas"
fi

echo ""

echo "6Ô∏è‚É£ **Testando Sistema...**"

# Executar teste simples
echo "   Executando teste b√°sico..."
python3 -c "
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from backend_app.models.database import get_db_session, create_tables
    
    # Testar base de dados
    create_tables()
    db = get_db_session()
    db.execute('SELECT 1')
    db.close()
    print('‚úÖ PostgreSQL/SQLite: OK')
    
except Exception as e:
    print(f'‚ùå Base de dados: {e}')

try:
    from backend_app.core.ai_agent import get_ai_agent
    agent = get_ai_agent()
    status = agent.get_agent_status()
    print(f'‚úÖ Agente AI: {status[\"status\"]} ({status[\"llm_type\"]})')
    
except Exception as e:
    print(f'‚ö†Ô∏è Agente AI: {e}')

print('üéâ Sistema b√°sico configurado!')
"

echo ""

echo "üéâ **INSTALA√á√ÉO COMPLETA!**"
echo ""
echo "üìã **Pr√≥ximos Passos:**"
echo ""
echo "1. **Configurar API Keys:**"
echo "   Editar .env com as tuas chaves:"
echo "   - OPENAI_API_KEY=sk-proj-..."
echo "   - GOOGLE_API_KEY=AIzaSy..."
echo "   - DATABASE_URL=postgresql://... (ou usar SQLite)"
echo ""
echo "2. **Iniciar Weaviate (se necess√°rio):**"
echo "   docker run -p 8080:8080 semitechnologies/weaviate:latest"
echo ""
echo "3. **Testar Sistema:**"
echo "   python test_hybrid_memory.py"
echo ""
echo "4. **Executar Aplica√ß√£o:**"
echo "   # Terminal 1 - Backend"
echo "   python main.py"
echo ""
echo "   # Terminal 2 - Frontend"
echo "   npm run dev"
echo ""
echo "5. **Aceder:**"
echo "   Frontend: http://localhost:3000"
echo "   Backend: http://localhost:8000"
echo "   Docs: http://localhost:8000/docs"
echo ""
echo "üìñ **Documenta√ß√£o:**"
echo "   - Consultar FRONTEND_INTEGRATION_GUIDE.md"
echo "   - Exemplos em main_example.py"
echo ""
echo "üöÄ **O teu sistema de mem√≥ria h√≠brida est√° pronto!**"
